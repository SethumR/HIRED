name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./HIRED_NEW/Backend/Candidate

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run Backend Tests
      run: |
        pytest --cov=./ --cov-report=xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./HIRED_NEW/Frontend

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './HIRED_NEW/Frontend/package-lock.json'

    - name: Install Dependencies
      run: npm ci

    - name: Run Frontend Tests
      run: |
        npm run test -- --coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage-final.json
        flags: frontend

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install ESLint
      run: |
        cd HIRED_NEW/Frontend
        npm install eslint

    - name: Run ESLint
      run: |
        cd HIRED_NEW/Frontend
        npx eslint . --ext .js,.jsx

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Flake8
      run: |
        python -m pip install flake8

    - name: Run Flake8
      run: |
        cd HIRED_NEW/Backend/Candidate
        flake8 .

  build:
    needs: [backend-tests, frontend-tests, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./HIRED_NEW/Backend/Candidate
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hired-backend:${{ github.sha }}

    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./HIRED_NEW/Frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hired-frontend:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/hired-backend:${{ github.sha }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/hired-frontend:${{ github.sha }}
          
          # Stop existing containers
          docker-compose down
          
          # Update docker-compose.yml with new image tags
          sed -i 's|hired-backend:.*|hired-backend:${{ github.sha }}|' docker-compose.yml
          sed -i 's|hired-frontend:.*|hired-frontend:${{ github.sha }}|' docker-compose.yml
          
          # Start new containers
          docker-compose up -d
          
          # Clean up old images
          docker image prune -f
